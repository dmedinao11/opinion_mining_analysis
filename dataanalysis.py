# -*- coding: utf-8 -*-
"""dataAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AsWmSa_ZzXy-Wk-mZEFi-eTjeRdZom2K

Obteniendo datos de contagios
"""

import requests
import re
import json


from datetime import datetime

def cleanResponse(r: dict):
  del r["Country"]
  del r["CountryCode"]
  del r["Province"]
  del r["City"]
  del r["CityCode"]
  del r["Lat"] 
  del r["Lon"] 
  del r["Active"]
  
  cleanDate = re.sub(r"T.+Z\b", "", r["Date"])

  r["Date"] = datetime.strptime(cleanDate, '%Y-%m-%d').strftime('%Y-%m-%d')
  return r  

def covidRequest():
  r = requests.get('https://api.covid19api.com/country/colombia?from=2020-08-13T00:00:00Z&to=2020-09-16T00:00:00Z')
  r = r.json()
  return list(map( lambda res: cleanResponse(res), r ))



name_file = "results.json"
json_array = covidRequest()
with open(name_file, "w") as json_file:
    json.dump(json_array, json_file)
    json_file.close()

import pandas as pd

from datetime import  datetime

def filterByDates(row, initDate, endDate):


df = pd.read_csv('data.csv')

df.rename(columns={"Fecha de diagnóstico": "date", "ID de caso": "cases"}, inplace=True)

df.head()

"""Contando Registros por fecha"""

import pandas as pd
dfN = pd.read_csv('negative_counts.csv')
dfN.rename(columns={"polarity_class": "Negative"}, inplace=True)
dfN.head()

dfP = pd.read_csv('positive_counts.csv')
dfP.rename(columns={"polarity_class": "Positive"}, inplace=True)

df = pd.concat([dfP["date"], dfP["Positive"], dfN["Negative"]], axis=1)
df.to_csv("NP_concat.csv")

df = pd.read_csv('proof.csv')
df = pd.concat([ df["date"], df["id"] ], axis=1)
df.rename(columns={"id": "total_tweets"}, inplace=True)
df.to_csv("counts.csv")

df1 = pd.read_csv('NP_concat.csv')
df2= pd.read_csv('counts.csv')


df = pd.concat([ df1["date"], df1["Positive"], df1["Negative"], df2["total_tweets"] ], axis=1)
df.set_index("date")
df.to_csv("counts_total.csv")

"""Calculando porcentajes

"""

df = pd.read_csv('counts_total.csv')
df = df.drop(df.columns[0], axis=1)
df.head()

def calcPercentage(value, total):
  return round((value*100)/total, 2)

def addPercentageColumn(row):
  total = int(row["total_tweets"])
  row["pos_percentage %"] = calcPercentage(int(row["Positive"]), total)
  row["neg_percentage %"] = calcPercentage(int(row["Negative"]), total)
  return row

df = df.apply(addPercentageColumn,axis=1)
df = df[['date', 'Positive', 'pos_percentage %', 'Negative', 'neg_percentage %', "total_tweets"]]

json_file_read = open("results.json", "r", encoding="utf-8")
data = json.load(json_file_read)
dfCovid = pd.DataFrame(data)
dfCovid = dfCovid.rename(columns={"Date": "date"})

df = pd.read_csv("data.csv")
df = df.drop(df.columns[0], axis=1)
df = df.drop([33])

df["Confirmed"] = dfCovid["Confirmed"]
df["Deaths"] = dfCovid["Deaths"]
df["Recovered"] = dfCovid["Recovered"]

df.to_csv("final_data.csv")

dfRes = pd.concat([df, dfCovid], axis=1)
dfRes.to_csv("concat.csv")

df = pd.read_csv("concat.csv")
df = df.drop('date.1', axis=1)
df = df.drop(df.columns[0], axis=1)
df.to_csv("final_data.csv")

df.head()

"""Scatter Plots"""

import matplotlib.pyplot as plt

x=df["Recovered"]

y=df["neg_percentage %"]

plt.plot(x,y, 'o')

"""Análisis de regresión lineal"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score


def delOutliers(df, column:str, percentil: int):
    y=df[column]

    qy_above = y.quantile(1 - percentil)
    qy_below = y.quantile(0 + percentil)

    return df[(df[column] > qy_below) & (df[column] < qy_above)]


df = pd.read_csv("data.csv")
df = df.drop(df.columns[0], axis=1)
df = df.set_index("date")
df.rename(columns={"Positive": "pos_feq", "Negative": "neg_feq", "pos_percentage %": "pos_rel_feq", "neg_percentage %": "neg_rel_feq"}, inplace=True)

df.head()

xName = "Deaths"
yName = "neg_feq"
deleteOutliers = True

if deleteOutliers:
  df = delOutliers(df, yName, 0.1)


x = df[xName]
y = df[yName]


X=x[:,np.newaxis]

print(np.corrcoef(x, y))

regr = LinearRegression()
regr = regr.fit(X, y)

m=regr.coef_[0]
b=regr.intercept_
y_p=m*X+b

plt.scatter(x,y, color="blue")
plt.plot(x,y_p, color="red")
plt.show()

df.to_excel("count.xlsx")